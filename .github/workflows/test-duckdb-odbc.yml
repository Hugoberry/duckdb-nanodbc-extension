name: Test DuckDB ODBC Driver Installation

on:
  workflow_dispatch:

jobs:
  test-odbc-installation:
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - platform: ubuntu-latest
            os_name: linux
            arch: amd64
          - platform: macos-latest
            os_name: osx
            arch: universal
          - platform: windows-latest
            os_name: windows
            arch: amd64
    
    runs-on: ${{ matrix.platform }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      # Step 1: List existing ODBC drivers (Linux)
      - name: List existing ODBC drivers (Linux)
        if: matrix.platform == 'ubuntu-latest'
        shell: bash
        run: |
          echo "===== ODBC Drivers Before Installation ====="
          [ -f /etc/odbcinst.ini ] && cat /etc/odbcinst.ini || echo "No odbcinst.ini file found"
          odbcinst -q -d || echo "odbcinst command not available or no drivers found"
      
      # Step 1: List existing ODBC drivers (macOS)
      - name: List existing ODBC drivers (macOS)
        if: matrix.platform == 'macos-latest'
        run: |
          echo "===== ODBC Drivers Before Installation ====="
          
          # Determine the correct Homebrew path
          if [ -d "/opt/homebrew/etc" ]; then
            # For Apple Silicon Macs
            HOMEBREW_ETC="/opt/homebrew/etc"
          else
            # For Intel Macs
            HOMEBREW_ETC="/usr/local/etc"
          fi
          
          echo "Using Homebrew config directory: $HOMEBREW_ETC"
          
          # Check for existing ODBC configuration files
          [ -f $HOMEBREW_ETC/odbcinst.ini ] && cat $HOMEBREW_ETC/odbcinst.ini || echo "No odbcinst.ini file found"
          [ -f $HOMEBREW_ETC/odbc.ini ] && cat $HOMEBREW_ETC/odbc.ini || echo "No odbc.ini file found"
          
          # List any existing ODBC drivers
          odbcinst -q -d || echo "odbcinst command not available or no drivers found"
      
      # Step 1: List existing ODBC drivers (Windows)
      - name: List existing ODBC drivers (Windows)
        if: matrix.platform == 'windows-latest'
        shell: powershell
        run: |
          Write-Host "===== ODBC Drivers Before Installation ====="
          Get-ItemProperty 'HKLM:\SOFTWARE\ODBC\ODBCINST.INI\ODBC Drivers' -ErrorAction SilentlyContinue | Format-Table -AutoSize
          Get-ChildItem 'HKLM:\SOFTWARE\ODBC\ODBCINST.INI' -ErrorAction SilentlyContinue | 
            Where-Object { $_.Name -notmatch 'ODBC Drivers$' } | 
            ForEach-Object { Write-Host $_.PSChildName }
      
      # Step 2: Install ODBC Driver Manager (Linux)
      - name: Install ODBC Driver Manager (Linux)
        if: matrix.platform == 'ubuntu-latest'
        shell: bash
        run: |
          echo "===== Installing ODBC Driver Manager ====="
          sudo apt-get update
          sudo apt-get install -y unixodbc odbcinst
      
      # Step 2: Install ODBC Driver Manager (macOS)
      - name: Install ODBC Driver Manager (macOS)
        if: matrix.platform == 'macos-latest'
        run: |
          echo "===== Installing ODBC Driver Manager ====="
          brew install unixodbc
      
      # Step 2: Download and Setup DuckDB ODBC Driver (Linux)
      - name: Download and Setup DuckDB ODBC Driver (Linux)
        if: matrix.platform == 'ubuntu-latest'
        shell: bash
        run: |
          echo "===== Installing DuckDB ODBC Driver ====="
          mkdir -p duckdb_odbc
          wget https://github.com/duckdb/duckdb-odbc/releases/download/v1.2.2/duckdb_odbc-linux-amd64.zip
          unzip duckdb_odbc-linux-amd64.zip -d duckdb_odbc
          cd duckdb_odbc
          chmod +x unixodbc_setup.sh
          ./unixodbc_setup.sh -u
          # Copy the driver to a system location so it can be found during build
          sudo cp libduckdb_odbc.so /usr/lib/
          sudo ldconfig
      
      # Step 2: Download and Setup DuckDB ODBC Driver (macOS)
      - name: Download and Setup DuckDB ODBC Driver (macOS)
        if: matrix.platform == 'macos-latest'
        run: |
          echo "===== Installing DuckDB ODBC Driver ====="
          mkdir -p duckdb_odbc
          curl -L -o duckdb_odbc-osx-universal.zip https://github.com/duckdb/duckdb-odbc/releases/download/v1.2.2/duckdb_odbc-osx-universal.zip
          unzip duckdb_odbc-osx-universal.zip -d duckdb_odbc
          
          # Check file existence and permissions
          echo "Checking extracted files:"
          ls -la duckdb_odbc/
          
          # Check if dynamic library is valid
          echo "Checking dynamic library information:"
          otool -L duckdb_odbc/libduckdb_odbc.dylib
          
          # Install unixODBC dependencies properly
          echo "Installing unixODBC with proper configuration:"
          brew install unixodbc
          brew list unixodbc
          
          # Find the unixODBC installation location
          UNIXODBC_LIB=$(brew --prefix unixodbc)/lib
          echo "unixODBC library location: $UNIXODBC_LIB"
          ls -la $UNIXODBC_LIB
          
          # Fix the library dependencies with install_name_tool
          echo "Fixing library path dependencies:"
          # First let's keep the original in case we need it
          cp duckdb_odbc/libduckdb_odbc.dylib duckdb_odbc/libduckdb_odbc.dylib.orig
          
          # Try to fix hard-coded paths if needed 
          if otool -L duckdb_odbc/libduckdb_odbc.dylib | grep -q "/Users/runner/work/duckdb-odbc"; then
            echo "Attempting to fix hardcoded paths in the library..."
            # Find the libodbcinst library path in the brew installation
            ODBCINST_LIB=$(find $UNIXODBC_LIB -name "libodbcinst*.dylib" | head -1)
            echo "Found odbcinst library at: $ODBCINST_LIB"
            
            install_name_tool -change "/Users/runner/work/duckdb-odbc/duckdb-odbc/build/unixodbc/build/lib/libodbcinst.2.dylib" \
                              "$ODBCINST_LIB" \
                              duckdb_odbc/libduckdb_odbc.dylib || echo "Failed to update library path"
            
            # Check if the changes were applied
            echo "Checking library dependencies after changes:"
            otool -L duckdb_odbc/libduckdb_odbc.dylib
          fi
          
          # Set proper permissions
          chmod 755 duckdb_odbc/libduckdb_odbc.dylib

          # Create symbolic link to ensure library can be found
          echo "Creating links to ensure library can be found:"
          sudo cp duckdb_odbc/libduckdb_odbc.dylib /usr/local/lib/
          sudo chmod 755 /usr/local/lib/libduckdb_odbc.dylib
          
          # Determine the correct Homebrew path
          if [ -d "/opt/homebrew/etc" ]; then
            # For Apple Silicon Macs
            HOMEBREW_ETC="/opt/homebrew/etc"
          else
            # For Intel Macs
            HOMEBREW_ETC="/usr/local/etc"
          fi
          
          echo "Using Homebrew config directory: $HOMEBREW_ETC"
          
          # Create ODBC configuration directories if they don't exist
          sudo mkdir -p $HOMEBREW_ETC
          
          # Create odbcinst.ini file with DuckDB driver definition
          echo "Creating ODBC driver configuration in $HOMEBREW_ETC/odbcinst.ini"
          sudo touch $HOMEBREW_ETC/odbcinst.ini
          echo "[DuckDB Driver]" | sudo tee $HOMEBREW_ETC/odbcinst.ini
          echo "Description=DuckDB ODBC Driver" | sudo tee -a $HOMEBREW_ETC/odbcinst.ini
          echo "Driver=/usr/local/lib/libduckdb_odbc.dylib" | sudo tee -a $HOMEBREW_ETC/odbcinst.ini
          echo "Setup=/usr/local/lib/libduckdb_odbc.dylib" | sudo tee -a $HOMEBREW_ETC/odbcinst.ini
          echo "UsageCount=1" | sudo tee -a $HOMEBREW_ETC/odbcinst.ini
          
          # Create a DSN in odbc.ini
          echo "Creating ODBC DSN configuration in $HOMEBREW_ETC/odbc.ini"
          sudo touch $HOMEBREW_ETC/odbc.ini
          echo "[DuckDB]" | sudo tee $HOMEBREW_ETC/odbc.ini
          echo "Description=DuckDB Database" | sudo tee -a $HOMEBREW_ETC/odbc.ini
          echo "Driver=DuckDB Driver" | sudo tee -a $HOMEBREW_ETC/odbc.ini
          echo "Database=:memory:" | sudo tee -a $HOMEBREW_ETC/odbc.ini
          
          # Set permissions
          sudo chmod 644 $HOMEBREW_ETC/odbcinst.ini $HOMEBREW_ETC/odbc.ini
          
          # Create a symlink to ensure the driver manager finds the configuration
          sudo ln -sf $HOMEBREW_ETC/odbcinst.ini /etc/odbcinst.ini || echo "Failed to create symlink to /etc"
          sudo ln -sf $HOMEBREW_ETC/odbc.ini /etc/odbc.ini || echo "Failed to create symlink to /etc"
      
      # Step 2: Download and Setup DuckDB ODBC Driver (Windows)
      - name: Download and Setup DuckDB ODBC Driver (Windows)
        if: matrix.platform == 'windows-latest'
        shell: powershell
        run: |
          Write-Host "===== Installing DuckDB ODBC Driver ====="
          mkdir duckdb_odbc
          Invoke-WebRequest -Uri "https://github.com/duckdb/duckdb-odbc/releases/download/v1.2.2/duckdb_odbc-windows-amd64.zip" -OutFile "duckdb_odbc.zip"
          Expand-Archive -Path duckdb_odbc.zip -DestinationPath duckdb_odbc -Force
          
          Write-Host "===== Inspecting Files ====="
          Get-ChildItem -Path .\duckdb_odbc -Recurse | ForEach-Object { Write-Host $_.FullName }
          
          Write-Host "===== Manual Driver Registration ====="
          # Instead of using the installer, manually register the driver
          # Copy the driver files to system directory
          Copy-Item -Path ".\duckdb_odbc\*.dll" -Destination "$env:SystemRoot\System32" -Force
          
          # Create registry entries directly
          $regPath = "HKLM:\SOFTWARE\ODBC\ODBCINST.INI"
          
          # Create driver entry in ODBC Drivers section
          if (!(Test-Path "$regPath\ODBC Drivers")) {
            New-Item -Path "$regPath\ODBC Drivers" -Force | Out-Null
          }
          New-ItemProperty -Path "$regPath\ODBC Drivers" -Name "DuckDB Driver" -Value "Installed" -PropertyType String -Force | Out-Null
          
          # Create driver details
          if (!(Test-Path "$regPath\DuckDB Driver")) {
            New-Item -Path "$regPath\DuckDB Driver" -Force | Out-Null
          }
          
          $driverPath = "$env:SystemRoot\System32\duckdb_odbc.dll"
          if (Test-Path ".\duckdb_odbc\duckdb_odbc.dll") {
            $driverPath = "$env:SystemRoot\System32\duckdb_odbc.dll"
          } elseif (Test-Path ".\duckdb_odbc\libduckdb_odbc.dll") {
            $driverPath = "$env:SystemRoot\System32\libduckdb_odbc.dll"
          }
          
          New-ItemProperty -Path "$regPath\DuckDB Driver" -Name "Driver" -Value $driverPath -PropertyType String -Force | Out-Null
          New-ItemProperty -Path "$regPath\DuckDB Driver" -Name "Setup" -Value $driverPath -PropertyType String -Force | Out-Null
          New-ItemProperty -Path "$regPath\DuckDB Driver" -Name "Description" -Value "DuckDB ODBC Driver" -PropertyType String -Force | Out-Null
          
          # Verify the installation was completed
          Write-Host "===== Verifying Installation ====="
          if (Test-Path -Path "$regPath\DuckDB Driver") {
            Write-Host "DuckDB Driver registered successfully in registry"
            Get-ItemProperty -Path "$regPath\DuckDB Driver" | Format-List
          } else {
            Write-Host "Warning: DuckDB Driver not found in registry"
          }
      
      # Step 3: List ODBC drivers after installation (Linux)
      - name: List ODBC drivers after installation (Linux)
        if: matrix.platform == 'ubuntu-latest'
        shell: bash
        run: |
          echo "===== ODBC Drivers After Installation ====="
          cat /etc/odbcinst.ini || echo "No odbcinst.ini file found"
          odbcinst -q -d || echo "odbcinst command not available or no drivers found"
          
          echo "===== Testing DuckDB ODBC Driver ====="
          # Optional: Add a simple test to verify the driver works
          isql -v DuckDB || echo "Could not connect to DuckDB DSN"
      
      # Step 3: List ODBC drivers after installation (macOS)
      - name: List ODBC drivers after installation (macOS)
        if: matrix.platform == 'macos-latest'
        run: |
          echo "===== ODBC Drivers After Installation ====="
          
          # Determine the correct Homebrew path
          if [ -d "/opt/homebrew/etc" ]; then
            # For Apple Silicon Macs
            HOMEBREW_ETC="/opt/homebrew/etc"
          else
            # For Intel Macs
            HOMEBREW_ETC="/usr/local/etc"
          fi
          
          echo "Using Homebrew config directory: $HOMEBREW_ETC"
          
          # Check the driver configuration
          echo "ODBC Drivers configuration:"
          cat $HOMEBREW_ETC/odbcinst.ini || echo "No odbcinst.ini file found"
          
          # Check the DSN configuration
          echo "ODBC DSN configuration:"
          cat $HOMEBREW_ETC/odbc.ini || echo "No odbc.ini file found"
          
          # List installed drivers
          echo "Installed ODBC drivers:"
          odbcinst -q -d || echo "odbcinst command not available or no drivers found"
          
          echo "===== Testing DuckDB ODBC Driver ====="
          # Set environment variables to help ODBC find the configuration
          export ODBCSYSINI=$HOMEBREW_ETC
          export ODBCINI=$HOMEBREW_ETC/odbc.ini
          
          # Try to connect to the DSN
          echo "Trying to connect to DuckDB DSN:"
          isql -v DuckDB || echo "Could not connect to DuckDB DSN"
      
      # Step 3: List ODBC drivers after installation (Windows)
      - name: List ODBC drivers after installation (Windows)
        if: matrix.platform == 'windows-latest'
        shell: powershell
        run: |
          Write-Host "===== ODBC Drivers After Installation ====="
          Get-ItemProperty 'HKLM:\SOFTWARE\ODBC\ODBCINST.INI\ODBC Drivers' -ErrorAction SilentlyContinue | Format-Table -AutoSize
          Get-ChildItem 'HKLM:\SOFTWARE\ODBC\ODBCINST.INI' -ErrorAction SilentlyContinue | 
            Where-Object { $_.Name -notmatch 'ODBC Drivers$' } | 
            ForEach-Object { Write-Host $_.PSChildName }
          
          Write-Host "===== Testing DuckDB ODBC Driver ====="
          # Optional: Add a test using PowerShell to verify the driver, if needed