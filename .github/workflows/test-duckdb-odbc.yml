name: Test DuckDB ODBC Driver Installation

on:
  workflow_dispatch:

jobs:
  test-odbc-installation:
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - platform: ubuntu-latest
            os_name: linux
            arch: amd64
          - platform: macos-latest
            os_name: osx
            arch: universal
          - platform: windows-latest
            os_name: windows
            arch: amd64
    
    runs-on: ${{ matrix.platform }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      # Step 1: List existing ODBC drivers (Linux)
      - name: List existing ODBC drivers (Linux)
        if: matrix.platform == 'ubuntu-latest'
        shell: bash
        run: |
          echo "===== ODBC Drivers Before Installation ====="
          [ -f /etc/odbcinst.ini ] && cat /etc/odbcinst.ini || echo "No odbcinst.ini file found"
          odbcinst -q -d || echo "odbcinst command not available or no drivers found"
      
      # Step 1: List existing ODBC drivers (macOS)
      - name: List existing ODBC drivers (macOS)
        if: matrix.platform == 'macos-latest'
        run: |
          echo "===== ODBC Drivers Before Installation ====="
          [ -f /usr/local/etc/odbcinst.ini ] && cat /usr/local/etc/odbcinst.ini || echo "No odbcinst.ini file found"
          [ -f /opt/homebrew/etc/odbcinst.ini ] && cat /opt/homebrew/etc/odbcinst.ini || echo "No Homebrew odbcinst.ini file found"
          odbcinst -q -d || echo "odbcinst command not available or no drivers found"
      
      # Step 1: List existing ODBC drivers (Windows)
      - name: List existing ODBC drivers (Windows)
        if: matrix.platform == 'windows-latest'
        shell: powershell
        run: |
          Write-Host "===== ODBC Drivers Before Installation ====="
          Get-ItemProperty 'HKLM:\SOFTWARE\ODBC\ODBCINST.INI\ODBC Drivers' -ErrorAction SilentlyContinue | Format-Table -AutoSize
          Get-ChildItem 'HKLM:\SOFTWARE\ODBC\ODBCINST.INI' -ErrorAction SilentlyContinue | 
            Where-Object { $_.Name -notmatch 'ODBC Drivers$' } | 
            ForEach-Object { Write-Host $_.PSChildName }
      
      # Step 2: Install ODBC Driver Manager (Linux)
      - name: Install ODBC Driver Manager (Linux)
        if: matrix.platform == 'ubuntu-latest'
        shell: bash
        run: |
          echo "===== Installing ODBC Driver Manager ====="
          sudo apt-get update
          sudo apt-get install -y unixodbc odbcinst
      
      # Step 2: Install ODBC Driver Manager (macOS)
      - name: Install ODBC Driver Manager (macOS)
        if: matrix.platform == 'macos-latest'
        run: |
          echo "===== Installing ODBC Driver Manager ====="
          brew install unixodbc
      
      # Step 2: Download and Setup DuckDB ODBC Driver (Linux)
      - name: Download and Setup DuckDB ODBC Driver (Linux)
        if: matrix.platform == 'ubuntu-latest'
        shell: bash
        run: |
          echo "===== Installing DuckDB ODBC Driver ====="
          mkdir -p duckdb_odbc
          wget https://github.com/duckdb/duckdb-odbc/releases/download/v1.2.2/duckdb_odbc-linux-amd64.zip
          unzip duckdb_odbc-linux-amd64.zip -d duckdb_odbc
          cd duckdb_odbc
          chmod +x unixodbc_setup.sh
          ./unixodbc_setup.sh -u
          # Copy the driver to a system location so it can be found during build
          sudo cp libduckdb_odbc.so /usr/lib/
          sudo ldconfig
      
      # Step 2: Download and Setup DuckDB ODBC Driver (macOS)
      - name: Download and Setup DuckDB ODBC Driver (macOS)
        if: matrix.platform == 'macos-latest'
        run: |
          echo "===== Installing DuckDB ODBC Driver ====="
          mkdir -p duckdb_odbc
          curl -L -o duckdb_odbc-osx-universal.zip https://github.com/duckdb/duckdb-odbc/releases/download/v1.2.2/duckdb_odbc-osx-universal.zip
          unzip duckdb_odbc-osx-universal.zip -d duckdb_odbc
          
          # Create odbcinst.ini file with DuckDB driver definition
          echo "[DuckDB Driver]" | sudo tee -a /usr/local/etc/odbcinst.ini
          echo "Description=DuckDB ODBC Driver" | sudo tee -a /usr/local/etc/odbcinst.ini
          echo "Driver=$(pwd)/duckdb_odbc/libduckdb_odbc.dylib" | sudo tee -a /usr/local/etc/odbcinst.ini
          echo "Setup=$(pwd)/duckdb_odbc/libduckdb_odbc.dylib" | sudo tee -a /usr/local/etc/odbcinst.ini
          echo "UsageCount=1" | sudo tee -a /usr/local/etc/odbcinst.ini
          
          # Create a DSN in odbc.ini
          echo "[DuckDB]" | sudo tee -a /usr/local/etc/odbc.ini
          echo "Description=DuckDB Database" | sudo tee -a /usr/local/etc/odbc.ini
          echo "Driver=DuckDB Driver" | sudo tee -a /usr/local/etc/odbc.ini
          echo "Database=:memory:" | sudo tee -a /usr/local/etc/odbc.ini
      
      # Step 2: Download and Setup DuckDB ODBC Driver (Windows)
      - name: Download and Setup DuckDB ODBC Driver (Windows)
        if: matrix.platform == 'windows-latest'
        shell: powershell
        run: |
          Write-Host "===== Installing DuckDB ODBC Driver ====="
          mkdir duckdb_odbc
          Invoke-WebRequest -Uri "https://github.com/duckdb/duckdb-odbc/releases/download/v1.2.2/duckdb_odbc-windows-amd64.zip" -OutFile "duckdb_odbc.zip"
          Expand-Archive -Path duckdb_odbc.zip -DestinationPath duckdb_odbc -Force
          
          Write-Host "===== Running ODBC Installer ====="
          # Run installer with /S for silent installation
          Start-Process -FilePath ".\duckdb_odbc\odbc_install.exe" -ArgumentList "/S" -Wait -NoNewWindow
          
          # Verify the installation was completed
          Write-Host "===== Verifying Installation ====="
          if (Test-Path -Path "HKLM:\SOFTWARE\ODBC\ODBCINST.INI\DuckDB Driver") {
            Write-Host "DuckDB Driver registered successfully in registry"
          } else {
            Write-Host "Warning: DuckDB Driver not found in registry"
          }
      
      # Step 3: List ODBC drivers after installation (Linux)
      - name: List ODBC drivers after installation (Linux)
        if: matrix.platform == 'ubuntu-latest'
        shell: bash
        run: |
          echo "===== ODBC Drivers After Installation ====="
          cat /etc/odbcinst.ini || echo "No odbcinst.ini file found"
          odbcinst -q -d || echo "odbcinst command not available or no drivers found"
          
          echo "===== Testing DuckDB ODBC Driver ====="
          # Optional: Add a simple test to verify the driver works
          isql -v DuckDB || echo "Could not connect to DuckDB DSN"
      
      # Step 3: List ODBC drivers after installation (macOS)
      - name: List ODBC drivers after installation (macOS)
        if: matrix.platform == 'macos-latest'
        run: |
          echo "===== ODBC Drivers After Installation ====="
          cat /usr/local/etc/odbcinst.ini || echo "No odbcinst.ini file found"
          cat /usr/local/etc/odbc.ini || echo "No odbc.ini file found"
          odbcinst -q -d || echo "odbcinst command not available or no drivers found"
          
          echo "===== Testing DuckDB ODBC Driver ====="
          # Optional: Add a simple test to verify the driver works
          isql -v DuckDB || echo "Could not connect to DuckDB DSN"
      
      # Step 3: List ODBC drivers after installation (Windows)
      - name: List ODBC drivers after installation (Windows)
        if: matrix.platform == 'windows-latest'
        shell: powershell
        run: |
          Write-Host "===== ODBC Drivers After Installation ====="
          Get-ItemProperty 'HKLM:\SOFTWARE\ODBC\ODBCINST.INI\ODBC Drivers' -ErrorAction SilentlyContinue | Format-Table -AutoSize
          Get-ChildItem 'HKLM:\SOFTWARE\ODBC\ODBCINST.INI' -ErrorAction SilentlyContinue | 
            Where-Object { $_.Name -notmatch 'ODBC Drivers$' } | 
            ForEach-Object { Write-Host $_.PSChildName }
          
          Write-Host "===== Testing DuckDB ODBC Driver ====="
          # Optional: Add a test using PowerShell to verify the driver, if needed