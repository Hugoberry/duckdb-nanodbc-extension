name: Test DuckDB ODBC Driver Installation

on:
  workflow_dispatch:

jobs:
  test-odbc-installation:
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - platform: ubuntu-latest
            os_name: linux
            arch: amd64
          - platform: macos-latest
            os_name: osx
            arch: universal
          - platform: windows-latest
            os_name: windows
            arch: amd64
    
    runs-on: ${{ matrix.platform }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      # Step 1: List existing ODBC drivers (Linux)
      - name: List existing ODBC drivers (Linux)
        if: matrix.platform == 'ubuntu-latest'
        shell: bash
        run: |
          echo "===== ODBC Drivers Before Installation ====="
          [ -f /etc/odbcinst.ini ] && cat /etc/odbcinst.ini || echo "No odbcinst.ini file found"
          odbcinst -q -d || echo "odbcinst command not available or no drivers found"
      
      # Step 1: List existing ODBC drivers (macOS)
      - name: List existing ODBC drivers (macOS)
        if: matrix.platform == 'macos-latest'
        run: |
          echo "===== ODBC Drivers Before Installation ====="
          
          # Determine the correct Homebrew path
          if [ -d "/opt/homebrew/etc" ]; then
            # For Apple Silicon Macs
            HOMEBREW_ETC="/opt/homebrew/etc"
          else
            # For Intel Macs
            HOMEBREW_ETC="/usr/local/etc"
          fi
          
          echo "Using Homebrew config directory: $HOMEBREW_ETC"
          
          # Check for existing ODBC configuration files
          [ -f $HOMEBREW_ETC/odbcinst.ini ] && cat $HOMEBREW_ETC/odbcinst.ini || echo "No odbcinst.ini file found"
          [ -f $HOMEBREW_ETC/odbc.ini ] && cat $HOMEBREW_ETC/odbc.ini || echo "No odbc.ini file found"
          
          # List any existing ODBC drivers
          odbcinst -q -d || echo "odbcinst command not available or no drivers found"
      
      # Step 1: List existing ODBC drivers (Windows)
      - name: List existing ODBC drivers (Windows)
        if: matrix.platform == 'windows-latest'
        shell: powershell
        run: |
          Write-Host "===== ODBC Drivers Before Installation ====="
          Get-OdbcDriver | Format-Table -AutoSize
      
      # Step 2: Install ODBC Driver Manager (Linux)
      - name: Install ODBC Driver Manager (Linux)
        if: matrix.platform == 'ubuntu-latest'
        shell: bash
        run: |
          echo "===== Installing ODBC Driver Manager ====="
          sudo apt-get update
          sudo apt-get install -y unixodbc odbcinst
      
      # Step 2: Install ODBC Driver Manager & DuckDB ODBC Driver (macOS)
      - name: Install DuckDB ODBC Driver (macOS)
        if: matrix.platform == 'macos-latest'
        run: |
          chmod +x ./scripts/install_duckdb_odbc_macos.sh
          ./scripts/install_duckdb_odbc_macos.sh
      
      # Step 2: Download and Setup DuckDB ODBC Driver (Linux)
      - name: Download and Setup DuckDB ODBC Driver (Linux)
        if: matrix.platform == 'ubuntu-latest'
        shell: bash
        run: |
          echo "===== Installing DuckDB ODBC Driver ====="
          mkdir -p duckdb_odbc
          wget https://github.com/duckdb/duckdb-odbc/releases/download/v1.2.2/duckdb_odbc-linux-amd64.zip
          unzip duckdb_odbc-linux-amd64.zip -d duckdb_odbc
          cd duckdb_odbc
          chmod +x unixodbc_setup.sh
          ./unixodbc_setup.sh -u
          # Copy the driver to a system location so it can be found during build
          sudo cp libduckdb_odbc.so /usr/lib/
          sudo ldconfig
      
      # Step 2: Download and Setup DuckDB ODBC Driver (Windows)
      - name: Download and Setup DuckDB ODBC Driver (Windows)
        if: matrix.platform == 'windows-latest'
        shell: powershell
        run: |
          ./scripts/install_duckdb_odbc_windows.ps1
       
      # Step 3: List ODBC drivers after installation (Linux)
      - name: List ODBC drivers after installation (Linux)
        if: matrix.platform == 'ubuntu-latest'
        shell: bash
        run: |
          echo "===== ODBC Drivers After Installation ====="
          cat /etc/odbcinst.ini || echo "No odbcinst.ini file found"
          odbcinst -q -d || echo "odbcinst command not available or no drivers found"
          
          echo "===== Testing DuckDB ODBC Driver ====="
          # Optional: Add a simple test to verify the driver works
          isql -v DuckDB || echo "Could not connect to DuckDB DSN"
      
      # Step 3: List ODBC drivers after installation (macOS)
      - name: List ODBC drivers after installation (macOS)
        if: matrix.platform == 'macos-latest'
        run: |
          echo "===== ODBC Drivers After Installation ====="
          
          # Determine the correct Homebrew path
          if [ -d "/opt/homebrew/etc" ]; then
            # For Apple Silicon Macs
            HOMEBREW_ETC="/opt/homebrew/etc"
          else
            # For Intel Macs
            HOMEBREW_ETC="/usr/local/etc"
          fi
          
          echo "Using Homebrew config directory: $HOMEBREW_ETC"
          
          # Check the driver configuration
          echo "ODBC Drivers configuration:"
          cat $HOMEBREW_ETC/odbcinst.ini || echo "No odbcinst.ini file found"
          
          # Check the DSN configuration
          echo "ODBC DSN configuration:"
          cat $HOMEBREW_ETC/odbc.ini || echo "No odbc.ini file found"
          
          # List installed drivers
          echo "Installed ODBC drivers:"
          odbcinst -q -d || echo "odbcinst command not available or no drivers found"
          
          echo "===== Testing DuckDB ODBC Driver ====="
          # Set environment variables to help ODBC find the configuration
          export ODBCSYSINI=$HOMEBREW_ETC
          export ODBCINI=$HOMEBREW_ETC/odbc.ini
          
          # Try to connect to the DSN
          echo "Trying to connect to DuckDB DSN:"
          isql -v DuckDB || echo "Could not connect to DuckDB DSN"
      
      # Step 3: List ODBC drivers after installation (Windows)
      - name: List ODBC drivers after installation (Windows)
        if: matrix.platform == 'windows-latest'
        shell: powershell
        run: |
          Get-OdbcDriver | Format-Table -AutoSize