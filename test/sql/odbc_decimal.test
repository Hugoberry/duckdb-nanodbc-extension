# name: test/sql/odbc_decimal.test
# description: Test decimal handling in ODBC extension across different database systems
# group: [odbc]

require odbc

# Set up connection variables for different database systems
# This allows the test to use a specific connection based on environment
statement ok
SET variable odbc_sqlite_connection = (SELECT CASE platform 
    WHEN 'osx_arm64' THEN 'Driver=SQLite Driver;Database=__TEST_DIR__/decimal_test.db' 
    ELSE 'Driver=DuckDB Driver;Database=__TEST_DIR__/decimal_test.db' 
    END FROM pragma_platform());


statement ok
SET variable odbc_test_connection = getvariable('odbc_sqlite_connection');

# Create a test table with decimal columns - using modest precision that most databases support
statement ok
CALL odbc_exec(getvariable('odbc_test_connection'), sql=>'DROP TABLE IF EXISTS decimal_tests;');

statement ok
CALL odbc_exec(getvariable('odbc_test_connection'), sql=>'CREATE TABLE decimal_tests (
  id INTEGER PRIMARY KEY,
  small_dec DECIMAL(4,2),
  medium_dec DECIMAL(9,3),
  large_dec DECIMAL(15,6),
  negative_dec DECIMAL(10,4)
);');

# Insert test data
statement ok
CALL odbc_exec(getvariable('odbc_test_connection'), sql=>'INSERT INTO decimal_tests VALUES
  (1, 12.3, 123.456, 123456.123456, -1234.5678),
  (2, 99.9, 999.999, 999999.999999, -9999.9999),
  (3, 0.01, 0.001, NULL, -0.0001),
  (4, NULL, NULL, NULL, NULL);');

# Basic test - using grep mode to allow for some formatting differences in output
# Test query and print all values (this will visually confirm decimal values)
query IRRRI nosort
SELECT id, small_dec, medium_dec, large_dec, negative_dec 
FROM odbc_scan('decimal_tests', getvariable('odbc_test_connection')) 
ORDER BY id;
----
1	12.3	123.456	123456.123456	-1234.5678
2	99.9	999.999	999999.999999	-9999.9999
3	0.01	0.001	NULL	-0.0001
4	NULL	NULL	NULL	NULL

# Test with all_varchar=true to get strings (eliminates decimal representation issues)
query ITTTT nosort
SELECT id, small_dec, medium_dec, large_dec, negative_dec 
FROM odbc_scan('decimal_tests', getvariable('odbc_test_connection'), all_varchar=true)
ORDER BY id;
----
1	12.3	123.456	123456.123456	-1234.5678
2	99.9	999.999	999999.999999	-9999.9999
3	0.01	0.001	NULL	-0.0001
4	NULL	NULL	NULL	NULL

# Test simple arithmetic (sum should work across systems)
query R
SELECT ROUND(SUM(small_dec::decimal), 2) FROM odbc_scan('decimal_tests', getvariable('odbc_test_connection'));
----
112.21

query R
SELECT ROUND(SUM(medium_dec::decimal), 3) FROM odbc_scan('decimal_tests', getvariable('odbc_test_connection'));
----
1123.456

query R
SELECT ROUND(SUM(large_dec::decimal), 6) FROM odbc_scan('decimal_tests', getvariable('odbc_test_connection'));
----
1123456.123456

query R
SELECT ROUND(SUM(negative_dec::decimal), 4) FROM odbc_scan('decimal_tests', getvariable('odbc_test_connection'));
----
-11234.5678

# Test with computations - using ROUND to handle potential precision differences
query R
SELECT ROUND((small_dec::decimal * 2) + medium_dec::decimal, 2) AS computed 
FROM odbc_scan('decimal_tests', getvariable('odbc_test_connection'))
WHERE id = 1;
----
148.06

# Test with division
query R
SELECT ROUND(medium_dec::decimal / small_dec::decimal, 2) AS ratio
FROM odbc_scan('decimal_tests', getvariable('odbc_test_connection'))
WHERE id = 1;
----
10.00

# Test filtering on decimal columns
query IR
SELECT id, small_dec FROM odbc_scan('decimal_tests', getvariable('odbc_test_connection'))
WHERE small_dec::decimal > 50
ORDER BY id;
----
2	99.9

# Test ordering by decimal columns
query IRR
SELECT id, small_dec, large_dec 
FROM odbc_scan('decimal_tests', getvariable('odbc_test_connection'))
WHERE id < 4
ORDER BY small_dec DESC;
----
2	99.9	999999.999999
1	12.3	123456.123456
3	0.01	NULL

# Test query with decimal in WHERE clause
query IR
SELECT id, medium_dec 
FROM odbc_scan('decimal_tests', getvariable('odbc_test_connection'))
WHERE medium_dec::decimal > 500;
----
2	999.999

# Test COUNT with a decimal filter
query I
SELECT COUNT(*) 
FROM odbc_scan('decimal_tests', getvariable('odbc_test_connection'))
WHERE small_dec::decimal < 50;
----
2

# Test aggregation with GROUP BY
query IR
SELECT COUNT(*), ROUND(SUM(small_dec::decimal), 2)
FROM odbc_scan('decimal_tests', getvariable('odbc_test_connection'))
WHERE small_dec IS NOT NULL;
----
3	112.21

# Clean up
statement ok
CALL odbc_exec(getvariable('odbc_test_connection'), sql=>'DROP TABLE decimal_tests;');